Object Relational Mapping (ORM) - A technique used in creating a "bridge" between object-oriented programs and, in most cases, relational databases.
                                - Put another way, you can see the ORM as the layer that connects object oriented programming (OOP) to relational databases.
                                -> To perform various data creating, reading, updating and deleting (CRUD) operations in relational databases without using SQL.

Advantages of the ORM     - Hides and encapsulates changes in the data source 
                          - Developers don't have to write any additional low-level code
                          - Makes it easier and more cost-effective to maintain the application over time 
Disadvantages of the ORM  - Lead to an erosion in application speed and performance due to the extra code that is generated for abstraction.
                          - In some cases, depending on ORM might result in poorly designed databases and make it harder to maintain applications.
                          - Incorrect mapping between data tables and objects can also create application problems that may be difficult to recognize and can affect overall performance.
                          - if the ORM layer is poorly written, it can become difficult to improve data schemas and to manage database migrations.

ORM tools - Django        - Suitable for building web applications quickly.
                          - Can interact with application data from many relational databases, including SQLite, PostgreSQL and MySQL.
          - SQLAlchemy    - Provides persistence patterns to speed up database access.
                          - Declarative Mapping structure defines both a Python object model and database metadata that describes real SQL tables in a database.
